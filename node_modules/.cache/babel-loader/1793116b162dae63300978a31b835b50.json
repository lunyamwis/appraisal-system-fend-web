{"ast":null,"code":"var _jsxFileName = \"/home/actserv/Documents/brooks_insurance_agency_software/brooks-insurance-front-end/src/components/messages/sendMessages.js\";\nimport React, { useState, useContext, useEffect, useCallback } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Grid, Container, Header, Icon, Form, Button, Divider, Tab, Message, Menu, Segment, Radio } from 'semantic-ui-react';\nimport { CKEditor } from '@ckeditor/ckeditor5-react';\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\nimport Clients from '../policies/listClients';\nimport Contacts from '../clients/listContactPersons.js';\nimport { GET_CONTACT_PERSONS } from '../contactPersons/queries';\nimport { AuthContext } from '../../context/auth';\nimport { useMutation, useQuery, useLazyQuery } from '@apollo/react-hooks';\nimport { MessageContext } from '../../context/messages.js';\nimport { FETCH_CLIENTS_QUERY, SEND_MESSAGES, GET_CORPORATE_CLIENTS } from '../clients/queries';\nimport * as yup from \"yup\";\nexport default function SendClientMessages(props) {\n  let history = useHistory();\n  const [errors, setErrors] = useState({\n    errorPaths: [],\n    errors: []\n  });\n  const [responseErrors, setResponseErrors] = useState([]);\n  const context = useContext(MessageContext);\n  const authContext = useContext(AuthContext);\n  const [clients, setClients] = useState();\n  const [contacts, setContacts] = useState();\n  const [corporateClients, setCorporateClients] = useState();\n  const [visible, setVisible] = useState(false);\n  const [search, setSearch] = useState({\n    search: \"\"\n  });\n  const [searchCorporate, setSearchCorporate] = useState({\n    search: \"\"\n  });\n  const [usersFetched, setUsersFetched] = useState(false);\n  const [values, setValues] = useState({\n    messageOption: \"S\",\n    afterSubmit: false,\n    messageOptUpdated: false,\n    allIndividual: false,\n    allCorporate: false,\n    allContactPersons: false,\n    individualClients: [],\n    contactPersons: [],\n    corporateClients: []\n  });\n  let schema = yup.object().shape({\n    individualClient: yup.string().required(\"\"),\n    contactPersons: yup.string().required(\"\")\n  });\n  const {\n    data: corporateClientsData\n  } = useQuery(GET_CORPORATE_CLIENTS, {\n    variables: searchCorporate\n  });\n  useEffect(() => {\n    if (corporateClientsData) {\n      setCorporateClients(corporateClientsData.corporateClients.items);\n    }\n  }, [corporateClientsData]);\n  const onChange = useCallback((event, {\n    name,\n    value\n  }) => {\n    setValues({ ...values,\n      [name]: value,\n      updated: true\n    });\n  }, [values]);\n  const setMessageOps = useCallback(() => {\n    const users = [...values.individualClients, ...values.corporateClients, ...values.contactPersons];\n\n    if (users.length < 2) {\n      setValues({ ...values,\n        messageOption: \"S\",\n        messageOptUpdated: false\n      });\n    } else {\n      setValues({ ...values,\n        messageOption: \"M\",\n        messageOptUpdated: false\n      });\n    }\n  }, [values]);\n  const onCheckbox = useCallback((event, {\n    name,\n    value\n  }) => {\n    if (value === \"allIndividual\") {\n      if (values.messageOption !== \"AI\") {\n        setValues({ ...values,\n          [value]: !values[value],\n          updated: true,\n          messageOption: \"AI\",\n          allContactPersons: false,\n          allCorporate: false,\n          allClients: false\n        });\n      } else {\n        setValues({ ...values,\n          [value]: !values[value],\n          updated: true,\n          messageOptUpdated: true\n        });\n      }\n    }\n\n    if (value === \"allContactPersons\") {\n      if (values.messageOption !== \"ACP\") {\n        setValues({ ...values,\n          [value]: !values[value],\n          updated: true,\n          messageOption: \"ACP\",\n          allIndividual: false,\n          allCorporate: false,\n          allClients: false\n        });\n      } else {\n        setValues({ ...values,\n          [value]: !values[value],\n          messageOptUpdated: true,\n          updated: true\n        });\n      }\n    }\n\n    if (value === \"allCorporate\") {\n      if (values.messageOption !== \"AC\") {\n        setValues({ ...values,\n          [value]: !values[value],\n          updated: true,\n          messageOption: \"AC\",\n          allContactPersons: false,\n          allIndividual: false,\n          allClients: false\n        });\n      } else {\n        setValues({ ...values,\n          [value]: !values[value],\n          messageOptUpdated: true,\n          updated: true\n        });\n      }\n    }\n\n    if (value === \"allClients\") {\n      if (values.messageOption !== \"A\") {\n        setValues({ ...values,\n          [value]: !values[value],\n          updated: true,\n          messageOption: \"A\",\n          allContactPersons: false,\n          allIndividual: false,\n          allCorporate: false\n        });\n      } else {\n        setValues({ ...values,\n          [value]: !values[value],\n          messageOptUpdated: true,\n          updated: true\n        });\n      }\n    }\n  }, [values]);\n  const anyAll = [values.allContactPersons, values.allCorporate, values.allIndividual, values.allClients].filter(Boolean).length > 0;\n  const [fetchClients, {\n    data: clientsData\n  }] = useLazyQuery(FETCH_CLIENTS_QUERY, {\n    variables: search\n  });\n  useEffect(() => {\n    if (!usersFetched) {\n      fetchClients();\n    }\n\n    if (clientsData) {\n      setClients(clientsData.individualClients.items);\n      setUsersFetched(true);\n    }\n  }, [clientsData, clients, fetchClients, usersFetched]);\n  const [fetchContacts, {\n    data: contactsData\n  }] = useLazyQuery(GET_CONTACT_PERSONS, {\n    variables: search\n  });\n  useEffect(() => {\n    if (!usersFetched) {\n      fetchContacts();\n    }\n\n    if (contactsData) {\n      setContacts(contactsData.contactPersons.items);\n      setUsersFetched(true);\n    }\n  }, [contactsData, contacts, fetchContacts, usersFetched]);\n  const validate = useCallback(values => {\n    schema.validate(values, {\n      abortEarly: false\n    }).then(valid => setErrors({\n      errorPaths: [],\n      errors: []\n    })) //called if the entire form is valid\n    .catch(err => {\n      setErrors({\n        errors: err.errors,\n        errorPaths: err.inner.map(i => i.path)\n      });\n    });\n  }, [schema]);\n  const [sendMessage, {\n    loading\n  }] = useCallback(useMutation(SEND_MULTI_WHATSAPP_MESSAGES, {\n    update(_, result) {\n      context.sendMessage(result.data.sendMessage.message);\n      history.push({\n        pathname: `/staff/dashboard/crm/message/${result.data.sendMessage.message.id}`\n      });\n    },\n\n    onError(err) {\n      console.log(err.graphQLErrors && err.graphQLErrors[0] ? err.graphQLErrors[0].message : err.networkError && err.networkError.result ? err.networkError.result.errors : err);\n\n      try {\n        if (err.graphQLErrors) {\n          setResponseErrors(err.graphQLErrors[0].message);\n        }\n\n        if (err.networkError !== null && err.networkError !== 'undefined') {\n          setResponseErrors(err.networkError.result.errors[0]);\n        } else if (err.graphQLErrors !== null && err.networkError !== 'undefined') {\n          setResponseErrors(err.graphQLErrors.result.errors[0]);\n        }\n      } catch (e) {\n        setVisible(true);\n      }\n    },\n\n    variables: values\n  }));\n\n  const handleOnClientSearch = e => {\n    setSearch({\n      search: e.target.value\n    });\n  };\n\n  const handleOnClientChange = (e, {\n    value\n  }) => {\n    e.preventDefault();\n    setValues({ ...values,\n      individualClients: value,\n      updated: true\n    });\n  };\n\n  const handleOnContactSearch = e => {\n    setSearch({\n      search: e.target.value\n    });\n  };\n\n  const handleOnContactChange = (e, {\n    value\n  }) => {\n    e.preventDefault();\n    setValues({ ...values,\n      contactPersons: value,\n      updated: true\n    });\n  };\n\n  const handleOnCorporateSearch = e => {\n    setSearchCorporate({\n      search: e.target.value\n    });\n  };\n\n  const handleOnCorporateChange = (e, {\n    value\n  }) => {\n    e.preventDefault();\n    setValues({ ...values,\n      corporateClients: value,\n      updated: true\n    });\n  };\n\n  useEffect(() => {\n    if (values.updated) {\n      setValues({ ...values,\n        updated: false\n      });\n\n      if (values.messageOptUpdated) {\n        setMessageOps();\n      }\n\n      if (values.afterSubmit) {\n        validate(values);\n      }\n    }\n  }, [values, validate, setMessageOps]);\n  useEffect(() => {\n    if (values.updated) {\n      if (values.updated && values.individualClients.length > 1 | values.contactPersons.length > 1 | values.contactPersons.length + values.individualClients.length > 2) {\n        setValues({ ...values,\n          messageOption: \"M\",\n          updated: false\n        });\n      }\n    }\n  }, [values]);\n  const panes = [{\n    menuItem: /*#__PURE__*/React.createElement(Menu.Item, {\n      key: \"clients\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 17\n      }\n    }, \"Notify\"),\n    render: () => {\n      return /*#__PURE__*/React.createElement(Tab.Pane, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Form, {\n        noValidate: true,\n        className: loading ? \"loading\" : '',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Form.Group, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Message, {\n        visible: !!errors.errors.length || visible,\n        warning: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Message.Header, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 37\n        }\n      }, \"Please correct the following issues:\"), !!responseErrors.length && /*#__PURE__*/React.createElement(Message, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 65\n        }\n      }, responseErrors), /*#__PURE__*/React.createElement(Message.List, {\n        items: errors.errors,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 38\n        }\n      }))), /*#__PURE__*/React.createElement(Divider, {\n        horizontal: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 29\n        }\n      }, \"Send notification options\"), /*#__PURE__*/React.createElement(Form.Group, {\n        widths: \"equal\",\n        as: Segment,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Form.Field, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Radio, {\n        label: \"Send to all Individual Clients\",\n        name: \"radioGroup\",\n        value: \"allIndividual\",\n        toggle: true,\n        checked: values.allIndividual,\n        onChange: onCheckbox,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 37\n        }\n      })), /*#__PURE__*/React.createElement(Form.Field, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Radio, {\n        label: \"Send to all Contact Persons\",\n        name: \"radioGroup\",\n        value: \"allContactPersons\",\n        toggle: true,\n        checked: values.allContactPersons,\n        onChange: onCheckbox,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 37\n        }\n      })), /*#__PURE__*/React.createElement(Form.Field, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Radio, {\n        label: \"Send to all Corporate Clients\",\n        name: \"radioGroup\",\n        value: \"allCorporate\",\n        toggle: true,\n        checked: values.allCorporate,\n        onChange: onCheckbox,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 37\n        }\n      })), /*#__PURE__*/React.createElement(Form.Field, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Radio, {\n        label: \"Send to ALL\",\n        name: \"radioGroup\",\n        value: \"allClients\",\n        toggle: true,\n        checked: values.allClients,\n        onChange: onCheckbox,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 37\n        }\n      }))), !anyAll && /*#__PURE__*/React.createElement(Form.Group, {\n        widths: \"equal\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(Form.Field, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 37\n        }\n      }, \"Individual Client(s)\"), clients && /*#__PURE__*/React.createElement(Clients, {\n        clients: clients,\n        multiple: true,\n        handleOnClientSearch: handleOnClientSearch,\n        handleOnClientChange: handleOnClientChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 49\n        }\n      })), /*#__PURE__*/React.createElement(Form.Field, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 37\n        }\n      }, \"Corporate Client(s)\"), corporateClients && /*#__PURE__*/React.createElement(Contacts, {\n        multiple: true,\n        clients: corporateClients,\n        placeholder: \"Select Corporate Client\",\n        handleOnClientSearch: handleOnCorporateSearch,\n        handleOnClientChange: handleOnCorporateChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 58\n        }\n      })), /*#__PURE__*/React.createElement(Form.Field, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 37\n        }\n      }, \"Contact Person(s)\"), contacts && /*#__PURE__*/React.createElement(Contacts, {\n        multiple: true,\n        clients: contacts,\n        handleOnClientSearch: handleOnContactSearch,\n        handleOnClientChange: handleOnContactChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 50\n        }\n      }))), /*#__PURE__*/React.createElement(Form.Group, {\n        widths: \"equal\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Form.Field, {\n        error: errors.errorPaths.includes('sms'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 37\n        }\n      }, \"SMS\"), /*#__PURE__*/React.createElement(Form.Input, {\n        fluid: true,\n        placeholder: \"Send sms\",\n        name: \"sms\",\n        onChange: onChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 37\n        }\n      }))), /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 32\n        }\n      }, \"Email Body\")), /*#__PURE__*/React.createElement(CKEditor, {\n        editor: ClassicEditor,\n        data: values.emailBody,\n        onChange: (event, editor) => {\n          const data = editor.getData();\n          setValues({ ...values,\n            emailBody: data\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 399,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Divider, {\n        horizontal: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 407,\n          columnNumber: 29\n        }\n      }, \"...\"), /*#__PURE__*/React.createElement(Button, {\n        type: \"submit\",\n        positive: true,\n        onClick: () => {\n          sendMessage();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 29\n        }\n      }, \"Send Information\")));\n    }\n  }];\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 422,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    padded: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid.Column, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 424,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"content-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 425,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    as: \"h2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 426,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Icon, {\n    name: \"settings\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 427,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(Header.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 428,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    href: \"/staff/dashboard/overview\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 429,\n      columnNumber: 33\n    }\n  }, \"Overview\"), \" \", '>', \" \", /*#__PURE__*/React.createElement(\"a\", {\n    href: \"/staff/dashboard/overview/crm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 429,\n      columnNumber: 88\n    }\n  }, \" CRM \"), '>', \" \", /*#__PURE__*/React.createElement(\"a\", {\n    href: \"/staff/dashboard/crm/messages\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 429,\n      columnNumber: 143\n    }\n  }, \"Messages\"), \" \", '>', \" Send Messages\", /*#__PURE__*/React.createElement(Header.Subheader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 430,\n      columnNumber: 33\n    }\n  }, \"Hello \", authContext.user.username, \", Fill in this form to send messages to clients\")))))), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    padded: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 439,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid.Column, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 440,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Tab, {\n    panes: panes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 441,\n      columnNumber: 21\n    }\n  }))));\n}","map":{"version":3,"sources":["/home/actserv/Documents/brooks_insurance_agency_software/brooks-insurance-front-end/src/components/messages/sendMessages.js"],"names":["React","useState","useContext","useEffect","useCallback","useHistory","Grid","Container","Header","Icon","Form","Button","Divider","Tab","Message","Menu","Segment","Radio","CKEditor","ClassicEditor","Clients","Contacts","GET_CONTACT_PERSONS","AuthContext","useMutation","useQuery","useLazyQuery","MessageContext","FETCH_CLIENTS_QUERY","SEND_MESSAGES","GET_CORPORATE_CLIENTS","yup","SendClientMessages","props","history","errors","setErrors","errorPaths","responseErrors","setResponseErrors","context","authContext","clients","setClients","contacts","setContacts","corporateClients","setCorporateClients","visible","setVisible","search","setSearch","searchCorporate","setSearchCorporate","usersFetched","setUsersFetched","values","setValues","messageOption","afterSubmit","messageOptUpdated","allIndividual","allCorporate","allContactPersons","individualClients","contactPersons","schema","object","shape","individualClient","string","required","data","corporateClientsData","variables","items","onChange","event","name","value","updated","setMessageOps","users","length","onCheckbox","allClients","anyAll","filter","Boolean","fetchClients","clientsData","fetchContacts","contactsData","validate","abortEarly","then","valid","catch","err","inner","map","i","path","sendMessage","loading","SEND_MULTI_WHATSAPP_MESSAGES","update","_","result","message","push","pathname","id","onError","console","log","graphQLErrors","networkError","e","handleOnClientSearch","target","handleOnClientChange","preventDefault","handleOnContactSearch","handleOnContactChange","handleOnCorporateSearch","handleOnCorporateChange","panes","menuItem","render","includes","emailBody","editor","getData","user","username"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect, useCallback } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport {\n    Grid,\n    Container,\n    Header,\n    Icon,\n    Form,\n    Button,\n    Divider,\n    Tab,\n    Message,\n    Menu,\n    Segment,\n    Radio,\n} from 'semantic-ui-react';\nimport { CKEditor } from '@ckeditor/ckeditor5-react';\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\nimport Clients from '../policies/listClients';\nimport Contacts from '../clients/listContactPersons.js';\nimport { GET_CONTACT_PERSONS } from '../contactPersons/queries';\nimport { AuthContext } from '../../context/auth';\n\nimport { useMutation, useQuery, useLazyQuery } from '@apollo/react-hooks';\nimport { MessageContext } from '../../context/messages.js';\nimport {\n    FETCH_CLIENTS_QUERY, SEND_MESSAGES,\n    GET_CORPORATE_CLIENTS\n} from '../clients/queries'\nimport * as yup from \"yup\";\n\nexport default function SendClientMessages(props) {\n    let history = useHistory();\n    const [errors, setErrors] = useState({\n        errorPaths: [],\n        errors: []\n    });\n    const [responseErrors, setResponseErrors] = useState([]);\n    const context = useContext(MessageContext);\n    const authContext = useContext(AuthContext);\n    const [clients, setClients] = useState();\n    const [contacts, setContacts] = useState();\n    const [corporateClients, setCorporateClients] = useState();\n\n    const [visible, setVisible] = useState(false);\n\n    const [search, setSearch] = useState({ search: \"\" });\n    const [searchCorporate, setSearchCorporate] = useState({ search: \"\" });\n    const [usersFetched, setUsersFetched] = useState(false);\n    const [values, setValues] = useState({\n        messageOption: \"S\",\n        afterSubmit: false,\n        messageOptUpdated: false,\n        allIndividual: false,\n        allCorporate: false,\n        allContactPersons: false,\n        individualClients: [],\n        contactPersons: [],\n        corporateClients: []\n    });\n\n    let schema = yup.object().shape({\n        individualClient: yup.string().required(\"\"),\n        contactPersons: yup.string().required(\"\"),\n\n    });\n\n\n    const { data: corporateClientsData } = useQuery(GET_CORPORATE_CLIENTS, {\n        variables: searchCorporate\n    });\n    useEffect(() => {\n        if (corporateClientsData) {\n            setCorporateClients(corporateClientsData.corporateClients.items);\n        }\n    }, [corporateClientsData]);\n\n\n    const onChange = useCallback((event, { name, value }) => {\n        setValues({ ...values, [name]: value, updated: true });\n    }, [values])\n    const setMessageOps = useCallback(() => {\n        const users = [...values.individualClients, ...values.corporateClients, ...values.contactPersons]\n        if (users.length < 2) {\n            setValues({ ...values, messageOption: \"S\", messageOptUpdated: false })\n        } else {\n            setValues({ ...values, messageOption: \"M\", messageOptUpdated: false })\n        }\n    }, [values])\n    const onCheckbox = useCallback((event, { name, value }) => {\n        if (value === \"allIndividual\") {\n            if (values.messageOption !== \"AI\") {\n                setValues({\n                    ...values,\n                    [value]: !values[value],\n                    updated: true,\n                    messageOption: \"AI\",\n                    allContactPersons: false,\n                    allCorporate: false,\n                    allClients: false\n                })\n            } else {\n                setValues({\n                    ...values,\n                    [value]: !values[value],\n                    updated: true,\n                    messageOptUpdated: true,\n                })\n            }\n        }\n        if (value === \"allContactPersons\") {\n            if (values.messageOption !== \"ACP\") {\n                setValues({\n                    ...values,\n                    [value]: !values[value],\n                    updated: true,\n                    messageOption: \"ACP\",\n                    allIndividual: false,\n                    allCorporate: false,\n                    allClients: false\n                })\n            } else {\n                setValues({\n                    ...values,\n                    [value]: !values[value],\n                    messageOptUpdated: true,\n                    updated: true\n                })\n            }\n        }\n        if (value === \"allCorporate\") {\n            if (values.messageOption !== \"AC\") {\n                setValues({\n                    ...values,\n                    [value]: !values[value],\n                    updated: true,\n                    messageOption: \"AC\",\n                    allContactPersons: false,\n                    allIndividual: false,\n                    allClients: false\n                })\n            } else {\n                setValues({\n                    ...values,\n                    [value]: !values[value],\n                    messageOptUpdated: true,\n                    updated: true\n                })\n            }\n\n        }\n        if (value === \"allClients\") {\n            if (values.messageOption !== \"A\") {\n                setValues({\n                    ...values,\n                    [value]: !values[value],\n                    updated: true,\n                    messageOption: \"A\",\n                    allContactPersons: false,\n                    allIndividual: false,\n                    allCorporate: false\n                })\n            } else {\n                setValues({\n                    ...values,\n                    [value]: !values[value],\n                    messageOptUpdated: true,\n                    updated: true\n                })\n            }\n        }\n\n    }, [values])\n\n    const anyAll = [values.allContactPersons, values.allCorporate, values.allIndividual, values.allClients].filter(Boolean).length > 0\n\n    const [fetchClients, { data: clientsData }] = useLazyQuery(FETCH_CLIENTS_QUERY, {\n        variables: search\n    });\n    useEffect(() => {\n        if (!usersFetched) {\n            fetchClients()\n        }\n        if (clientsData) {\n            setClients(clientsData.individualClients.items);\n            setUsersFetched(true)\n        }\n    }, [clientsData, clients, fetchClients, usersFetched]);\n\n    const [fetchContacts, { data: contactsData }] = useLazyQuery(GET_CONTACT_PERSONS, {\n        variables: search\n    });\n\n    useEffect(() => {\n        if (!usersFetched) {\n            fetchContacts()\n        }\n\n        if (contactsData) {\n            setContacts(contactsData.contactPersons.items);\n            setUsersFetched(true)\n        }\n\n    }, [contactsData, contacts, fetchContacts, usersFetched]);\n\n\n\n    const validate = useCallback((values) => {\n        schema.validate(values, { abortEarly: false })\n            .then(valid => setErrors({ errorPaths: [], errors: [] })) //called if the entire form is valid\n            .catch(err => {\n                setErrors({ errors: err.errors, errorPaths: err.inner.map(i => i.path) })\n            })\n    }, [schema])\n\n    const [sendMessage, { loading }] = useCallback(useMutation(SEND_MULTI_WHATSAPP_MESSAGES, {\n        update(_, result) {\n            context.sendMessage(result.data.sendMessage.message)\n            history.push({\n                pathname: `/staff/dashboard/crm/message/${result.data.sendMessage.message.id}`\n            })\n        },\n        onError(err) {\n            console.log(err.graphQLErrors && err.graphQLErrors[0] ? err.graphQLErrors[0].message : err.networkError && err.networkError.result ? err.networkError.result.errors : err)\n            try {\n                if (err.graphQLErrors) {\n                    setResponseErrors(err.graphQLErrors[0].message);\n                }\n\n                if (err.networkError !== null && err.networkError !== 'undefined') {\n\n                    setResponseErrors(err.networkError.result.errors[0]);\n\n                } else if (err.graphQLErrors !== null && err.networkError !== 'undefined') {\n\n                    setResponseErrors(err.graphQLErrors.result.errors[0]);\n\n                }\n            } catch (e) {\n                setVisible(true);\n            }\n\n        },\n        variables: values,\n    }));\n\n    const handleOnClientSearch = (e) => {\n        setSearch({ search: e.target.value });\n    }\n    const handleOnClientChange = (e, { value }) => {\n        e.preventDefault()\n        setValues({ ...values, individualClients: value, updated: true });\n    }\n\n    const handleOnContactSearch = (e) => {\n        setSearch({ search: e.target.value });\n    }\n    const handleOnContactChange = (e, { value }) => {\n        e.preventDefault()\n        setValues({ ...values, contactPersons: value, updated: true });\n    }\n    const handleOnCorporateSearch = (e) => {\n        setSearchCorporate({ search: e.target.value });\n    }\n    const handleOnCorporateChange = (e, { value }) => {\n        e.preventDefault()\n        setValues({ ...values, corporateClients: value, updated: true });\n    }\n\n    useEffect(() => {\n        if (values.updated) {\n            setValues({ ...values, updated: false })\n            if (values.messageOptUpdated) { setMessageOps() }\n            if (values.afterSubmit) {\n                validate(values)\n            }\n        }\n    }, [values, validate, setMessageOps])\n    useEffect(() => {\n        if (values.updated) {\n            if (values.updated && (values.individualClients.length > 1 |\n                values.contactPersons.length > 1 |\n                ((values.contactPersons.length + values.individualClients.length) > 2))) {\n                setValues({ ...values, messageOption: \"M\", updated: false })\n            }\n\n        }\n    }, [values])\n\n\n    const panes = [\n        {\n            menuItem: (\n                <Menu.Item key='clients'>\n                    Notify\n                </Menu.Item>\n            ),\n            render: () => {\n                return (\n                    <Tab.Pane>\n                        <Form noValidate className={loading ? \"loading\" : ''}>\n                            <Form.Group>\n                                <Message visible={!!errors.errors.length || visible} warning>\n                                    <Message.Header>Please correct the following issues:</Message.Header>\n                                    {!!responseErrors.length && <Message>{responseErrors}</Message>}\n                                    {<Message.List items={errors.errors} />}\n                                </Message>\n                            </Form.Group>\n                            <Divider horizontal>Send notification options</Divider>\n                            <Form.Group widths='equal' as={Segment}>\n                                <Form.Field>\n                                    <Radio\n                                        label='Send to all Individual Clients'\n                                        name='radioGroup'\n                                        value='allIndividual'\n                                        toggle\n                                        checked={values.allIndividual}\n                                        onChange={onCheckbox}\n                                    />\n                                </Form.Field>\n                                <Form.Field>\n                                    <Radio\n                                        label='Send to all Contact Persons'\n                                        name='radioGroup'\n                                        value='allContactPersons'\n                                        toggle\n                                        checked={values.allContactPersons}\n                                        onChange={onCheckbox}\n                                    />\n                                </Form.Field>\n                                <Form.Field>\n                                    <Radio\n                                        label='Send to all Corporate Clients'\n                                        name='radioGroup'\n                                        value='allCorporate'\n                                        toggle\n                                        checked={values.allCorporate}\n                                        onChange={onCheckbox}\n                                    />\n                                </Form.Field>\n                                <Form.Field>\n                                    <Radio\n                                        label='Send to ALL'\n                                        name='radioGroup'\n                                        value='allClients'\n                                        toggle\n                                        checked={values.allClients}\n                                        onChange={onCheckbox}\n                                    />\n                                </Form.Field>\n\n                            </Form.Group>\n                            {!anyAll && <Form.Group widths='equal'>\n                                <Form.Field>\n                                    <label>Individual Client(s)</label>\n                                    {clients && <Clients\n                                        clients={clients}\n                                        multiple={true}\n                                        handleOnClientSearch={handleOnClientSearch}\n                                        handleOnClientChange={handleOnClientChange}\n                                    />}\n                                </Form.Field>\n                                <Form.Field>\n                                    <label>Corporate Client(s)</label>\n                                    {corporateClients && <Contacts\n                                        multiple={true}\n                                        clients={corporateClients}\n                                        placeholder='Select Corporate Client'\n                                        handleOnClientSearch={handleOnCorporateSearch}\n                                        handleOnClientChange={handleOnCorporateChange}\n                                    />}\n                                </Form.Field>\n                                <Form.Field>\n                                    <label>Contact Person(s)</label>\n                                    {contacts && <Contacts\n                                        multiple={true}\n                                        clients={contacts}\n                                        handleOnClientSearch={handleOnContactSearch}\n                                        handleOnClientChange={handleOnContactChange}\n                                    />}\n                                </Form.Field>\n                            </Form.Group>\n                            }\n                            <Form.Group widths='equal'>\n                                <Form.Field error={errors.errorPaths.includes('sms')}>\n                                    <label>SMS</label>\n                                    <Form.Input fluid placeholder='Send sms'\n                                        name='sms'\n                                        onChange={onChange}\n\n                                    />\n                                </Form.Field>\n\n                            </Form.Group>\n\n                            \n\n                            <b><label>Email Body</label></b>\n                            <CKEditor\n                                editor={ClassicEditor}\n                                data={values.emailBody}\n                                onChange={(event, editor) => {\n                                    const data = editor.getData();\n                                    setValues({ ...values, emailBody: data })\n\n                                }} />\n                            <Divider horizontal>...</Divider>\n                            <Button type='submit' positive onClick={() => { sendMessage(); }}>\n                                Send Information\n                        </Button>\n                        </Form>\n\n                    </Tab.Pane>\n                )\n            },\n        },\n\n\n    ]\n\n    return (\n        <Container>\n            <Grid container padded>\n                <Grid.Column>\n                    <div className=\"content-wrapper\">\n                        <Header as='h2'>\n                            <Icon name='settings' />\n                            <Header.Content>\n                                <a href=\"/staff/dashboard/overview\">Overview</a> {'>'} <a href=\"/staff/dashboard/overview/crm\"> CRM </a>{'>'} <a href=\"/staff/dashboard/crm/messages\">Messages</a> {'>'} Send Messages\n                                <Header.Subheader>\n                                    Hello {authContext.user.username}, Fill in this form to send messages to clients\n                                </Header.Subheader>\n                            </Header.Content>\n                        </Header>\n                    </div>\n                </Grid.Column>\n            </Grid>\n\n            <Grid container padded>\n                <Grid.Column>\n                    <Tab panes={panes} />\n\n\n\n                </Grid.Column>\n            </Grid>\n\n        </Container >\n    )\n}\n"]},"metadata":{},"sourceType":"module"}