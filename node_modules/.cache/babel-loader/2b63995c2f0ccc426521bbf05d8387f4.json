{"ast":null,"code":"import gql from 'graphql-tag';\nexport const GET_CLIENT_QUERY = gql`\nquery getIndividualType($id:String!) {\n  individualClient(id:$id)\n  {\n    id\n    createdAt\n    clientNumber\n    lastName\n    email\n    deletedAt\n    updatedAt\n    firstName\n    lastName\n    occupation\n    status\n    town\n    location\n    dateOfBirth\n    gender\n    phoneNumber\n    idNumber\n    kraPin\n    postalAddress\n    agency{\n      id\n      name\n      agencyEmail\n    }\n    contactPersons{\n      id\n      name\n      email\n      position\n    }\n}\n}`;\nexport const FETCH_CLIENTS_QUERY = gql`\nquery getIndividualType($search:String, $page:Int, $limit:Int) {\n  individualClients(search:$search, page:$page, limit:$limit)\n  {\n    count\n    pages\n    hasNext\n    hasPrev\n    items\n    {\n    id\n    clientNumber\n    createdAt\n    lastName\n    email\n    updatedAt\n    firstName\n    lastName\n    surname\n    occupation\n    town\n    location\n    dateOfBirth\n    gender\n    phoneNumber\n    idNumber\n    kraPin\n    postalAddress\n    agency{\n      id\n      name\n      agencyEmail\n    }\n\n\n    }}}`;\nexport const FETCH_CORPORATE_CLIENTS_QUERY = gql`\nquery getCorporateClients($search:String, $page:Int, $limit:Int) {\n  corporateClients(\n    search:$search\n    page:$page\n    limit:$limit\n  ) {\n    count\n    pages\n    hasNext\n    hasPrev\n    items {\n      id\n      createdAt\n      clientNumber\n      name\n      about\n      email\n      postalAddress\n      town\n      kraPin\n      linkedinAccount\n      twitterAccount\n      facebookAccount\n      instagramAccount\n      phoneNumber\n      location\n      agency {\n        id\n        name\n        agencyEmail\n      }\n    }\n  }\n}\n`;\nexport const ADD_NEW_CLIENT = gql`\nmutation createIndividualClient(\n    $email: String\n    $firstName: String!\n    $lastName: String!\n    $phoneNumber: String\n    $surname: String!\n    $town: String!\n    $occupation: String!\n    $dateOfBirth: Date!\n    $gender:  String!\n    $status:  String!\n    $idNumber: Int!\n    $kraPin: String!\n    $contactPersons:[String]\n    ) {\n      createIndividualClient(\n        input:{\n          email: $email\n          firstName: $firstName\n          lastName: $lastName\n          phoneNumber: $phoneNumber\n          surname: $surname\n          town: $town\n          status: $status\n          occupation: $occupation\n          dateOfBirth: $dateOfBirth\n          gender: $gender\n          idNumber: $idNumber\n          kraPin: $kraPin\n          contactPersons: $contactPersons\n  }){\n    status\n    message\n    individualClient {\n      id\n      createdAt\n      clientNumber\n      lastName\n      email\n      deletedAt\n      updatedAt\n      firstName\n      lastName\n      occupation\n      status\n      town\n      dateOfBirth\n      gender\n      phoneNumber\n      idNumber\n      kraPin\n      postalAddress\n      agency{\n        id\n        name\n        agencyEmail\n      }\n      contactPersons{\n        id\n        name\n        email\n        position\n      }\n      }\n  }\n}\n`;\nexport const ADD_NEW_CORPORATE_CLIENT = gql`\nmutation createCorporateClient(\n  $email:String\n  $name:String!\n  $phoneNumber:String\n  $kraPin:String!\n  $town:String!\n  $about:String!\n  $twitterAccount:String\n  $status:String!\n  $postalAddress:String!\n  $instagramAccount:String\n  $facebookAccount:String\n  $linkedinAccount:String\n  $contactPersons:[String]\n)\n  {\n  createCorporateClient(\n    input:{\n    email:$email\n    name:$name\n    phoneNumber:$phoneNumber\n    town:$town\n    status: $status\n    kraPin:$kraPin\n    about: $about\n    postalAddress:$postalAddress\n    twitterAccount:$twitterAccount\n    instagramAccount: $instagramAccount\n    facebookAccount: $facebookAccount\n    linkedinAccount: $linkedinAccount\n    contactPersons: $contactPersons\n  }\n  ){\n    status\n    message\n     corporateClient{\n      id\n      createdAt\n      clientNumber\n      name\n      about\n      email\n      postalAddress\n      town\n      status\n      kraPin\n      linkedinAccount\n      twitterAccount\n      facebookAccount\n      instagramAccount\n      phoneNumber\n      location\n      agency{\n        id\n        name\n        agencyEmail\n      }\n      contactPersons{\n        id\n        name\n        email\n        position\n      }\n    }\n  }\n}`;\nexport const GET_CORPORATE_CLIENT = gql`\nquery getCorporateClient($id:String!) {\n  corporateClient(id: $id) {\n    id\n    createdAt\n    clientNumber\n    name\n    about\n    email\n    postalAddress\n    town\n    status\n    kraPin\n    linkedinAccount\n    twitterAccount\n    facebookAccount\n    instagramAccount\n    phoneNumber\n    location\n    agency {\n      id\n      name\n      agencyEmail\n    }\n    contactPersons{\n      id\n      name\n      email\n      position\n    }\n  }\n}\n`;\nexport const GET_CORPORATE_CLIENTS = gql`\nquery getCorporateClients($search:String, $page:Int, $limit:Int) {\n  corporateClients(\n    search:$search\n    page:$page\n    limit:$limit\n  ) {\n    count\n    pages\n    hasNext\n    hasPrev\n    items {\n      id\n      clientNumber\n      name\n      email\n    }\n  }\n}`;\nexport const SEND_MESSAGES = gql`\nmutation sendMessage(\n  $emailSubject: String,\n  $emailBody: String,\n  $messageOption: String,\n  $sms: String,\n  $individualClients: [String],\n  $corporateClients:[String],\n  $contactPersons:[String]\n  ) {\n  sendMessage(\n    input: {\n      emailSubject: $emailSubject,\n      emailBody: $emailBody,\n      messageOption: $messageOption,\n      sms:$sms\n      individualClients: $individualClients,\n      corporateClients: $corporateClients,\n      contactPersons: $contactPersons\n    }) {\n    status\n    message {\n      id\n      createdAt\n      sms\n      emailBody\n      emailSubject\n      option\n      sentAt\n      individualClients {\n        id\n        email\n        phoneNumber\n        firstName\n        lastName\n\n      }\n      contactPersons {\n        id\n        email\n        name\n        phoneNumber\n        serviceLine\n      }\n      corporateClients{\n        id\n        name\n        email\n      }\n    }\n  }\n}\n`;\nexport const GET_SENDING_OPTS = gql`\nquery geMessageOptions {\n  messageOptions}`;\nexport const GET_MESSAGES = gql`\nquery getMessages($search:String, $page:Int, $limit:Int) {\n  messages(\n    search:$search\n    page:$page\n    limit:$limit\n  ) {\n    count\n    pages\n    hasNext\n    hasPrev\n    items {\n      id\n      createdAt\n      sms\n      emailBody\n      emailSubject\n      option\n      sentAt\n    }\n  }\n}\n`;\nexport const GET_MESSAGE = gql`\nquery getMessage($id: String!) {\n  message(id: $id) {\n    id\n    createdAt\n    sms\n    emailBody\n    emailSubject\n    option\n    sentAt\n    individualClients {\n      id\n      email\n      firstName\n      lastName\n      surname\n    }\n    contactPersons {\n      id\n      email\n      name\n      serviceLine\n    }\n    corporateClients{\n      id\n      name\n      email\n    }\n  }\n}\n`;\nexport const GET_STATUS_OPTS = gql`\nquery getClientStatusOptions {\n  clientStatusOptions\n    }`;","map":{"version":3,"sources":["/home/actserv/Documents/brooks_insurance_agency_software/brooks-insurance-front-end/src/components/clients/queries.js"],"names":["gql","GET_CLIENT_QUERY","FETCH_CLIENTS_QUERY","FETCH_CORPORATE_CLIENTS_QUERY","ADD_NEW_CLIENT","ADD_NEW_CORPORATE_CLIENT","GET_CORPORATE_CLIENT","GET_CORPORATE_CLIENTS","SEND_MESSAGES","GET_SENDING_OPTS","GET_MESSAGES","GET_MESSAGE","GET_STATUS_OPTS"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,aAAhB;AAEA,OAAO,MAAMC,gBAAgB,GAAGD,GAAI;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAnCO;AAoCP,OAAO,MAAME,mBAAmB,GAAGF,GAAI;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAnCO;AAoCP,OAAO,MAAMG,6BAA6B,GAAGH,GAAI;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAnCO;AAsCP,OAAO,MAAMI,cAAc,GAAGJ,GAAI;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAnEO;AAoEP,OAAO,MAAMK,wBAAwB,GAAGL,GAAI;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAlEO;AAoEP,OAAO,MAAMM,oBAAoB,GAAGN,GAAI;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAhCO;AAiCP,OAAO,MAAMO,qBAAqB,GAAGP,GAAI;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAlBO;AAoBP,OAAO,MAAMQ,aAAa,GAAGR,GAAI;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CApDO;AAsDP,OAAO,MAAMS,gBAAgB,GAAGT,GAAI;AACpC;AACA,kBAFO;AAIP,OAAO,MAAMU,YAAY,GAAGV,GAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAtBO;AAuBP,OAAO,MAAMW,WAAW,GAAGX,GAAI;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CA9BO;AAgCP,OAAO,MAAMY,eAAe,GAAGZ,GAAI;AACnC;AACA;AACA,MAHO","sourcesContent":["import gql from 'graphql-tag';\n\nexport const GET_CLIENT_QUERY = gql`\nquery getIndividualType($id:String!) {\n  individualClient(id:$id)\n  {\n    id\n    createdAt\n    clientNumber\n    lastName\n    email\n    deletedAt\n    updatedAt\n    firstName\n    lastName\n    occupation\n    status\n    town\n    location\n    dateOfBirth\n    gender\n    phoneNumber\n    idNumber\n    kraPin\n    postalAddress\n    agency{\n      id\n      name\n      agencyEmail\n    }\n    contactPersons{\n      id\n      name\n      email\n      position\n    }\n}\n}`\nexport const FETCH_CLIENTS_QUERY = gql`\nquery getIndividualType($search:String, $page:Int, $limit:Int) {\n  individualClients(search:$search, page:$page, limit:$limit)\n  {\n    count\n    pages\n    hasNext\n    hasPrev\n    items\n    {\n    id\n    clientNumber\n    createdAt\n    lastName\n    email\n    updatedAt\n    firstName\n    lastName\n    surname\n    occupation\n    town\n    location\n    dateOfBirth\n    gender\n    phoneNumber\n    idNumber\n    kraPin\n    postalAddress\n    agency{\n      id\n      name\n      agencyEmail\n    }\n\n\n    }}}`\nexport const FETCH_CORPORATE_CLIENTS_QUERY = gql`\nquery getCorporateClients($search:String, $page:Int, $limit:Int) {\n  corporateClients(\n    search:$search\n    page:$page\n    limit:$limit\n  ) {\n    count\n    pages\n    hasNext\n    hasPrev\n    items {\n      id\n      createdAt\n      clientNumber\n      name\n      about\n      email\n      postalAddress\n      town\n      kraPin\n      linkedinAccount\n      twitterAccount\n      facebookAccount\n      instagramAccount\n      phoneNumber\n      location\n      agency {\n        id\n        name\n        agencyEmail\n      }\n    }\n  }\n}\n`\n\n\nexport const ADD_NEW_CLIENT = gql`\nmutation createIndividualClient(\n    $email: String\n    $firstName: String!\n    $lastName: String!\n    $phoneNumber: String\n    $surname: String!\n    $town: String!\n    $occupation: String!\n    $dateOfBirth: Date!\n    $gender:  String!\n    $status:  String!\n    $idNumber: Int!\n    $kraPin: String!\n    $contactPersons:[String]\n    ) {\n      createIndividualClient(\n        input:{\n          email: $email\n          firstName: $firstName\n          lastName: $lastName\n          phoneNumber: $phoneNumber\n          surname: $surname\n          town: $town\n          status: $status\n          occupation: $occupation\n          dateOfBirth: $dateOfBirth\n          gender: $gender\n          idNumber: $idNumber\n          kraPin: $kraPin\n          contactPersons: $contactPersons\n  }){\n    status\n    message\n    individualClient {\n      id\n      createdAt\n      clientNumber\n      lastName\n      email\n      deletedAt\n      updatedAt\n      firstName\n      lastName\n      occupation\n      status\n      town\n      dateOfBirth\n      gender\n      phoneNumber\n      idNumber\n      kraPin\n      postalAddress\n      agency{\n        id\n        name\n        agencyEmail\n      }\n      contactPersons{\n        id\n        name\n        email\n        position\n      }\n      }\n  }\n}\n`\nexport const ADD_NEW_CORPORATE_CLIENT = gql`\nmutation createCorporateClient(\n  $email:String\n  $name:String!\n  $phoneNumber:String\n  $kraPin:String!\n  $town:String!\n  $about:String!\n  $twitterAccount:String\n  $status:String!\n  $postalAddress:String!\n  $instagramAccount:String\n  $facebookAccount:String\n  $linkedinAccount:String\n  $contactPersons:[String]\n)\n  {\n  createCorporateClient(\n    input:{\n    email:$email\n    name:$name\n    phoneNumber:$phoneNumber\n    town:$town\n    status: $status\n    kraPin:$kraPin\n    about: $about\n    postalAddress:$postalAddress\n    twitterAccount:$twitterAccount\n    instagramAccount: $instagramAccount\n    facebookAccount: $facebookAccount\n    linkedinAccount: $linkedinAccount\n    contactPersons: $contactPersons\n  }\n  ){\n    status\n    message\n     corporateClient{\n      id\n      createdAt\n      clientNumber\n      name\n      about\n      email\n      postalAddress\n      town\n      status\n      kraPin\n      linkedinAccount\n      twitterAccount\n      facebookAccount\n      instagramAccount\n      phoneNumber\n      location\n      agency{\n        id\n        name\n        agencyEmail\n      }\n      contactPersons{\n        id\n        name\n        email\n        position\n      }\n    }\n  }\n}`\n\nexport const GET_CORPORATE_CLIENT = gql`\nquery getCorporateClient($id:String!) {\n  corporateClient(id: $id) {\n    id\n    createdAt\n    clientNumber\n    name\n    about\n    email\n    postalAddress\n    town\n    status\n    kraPin\n    linkedinAccount\n    twitterAccount\n    facebookAccount\n    instagramAccount\n    phoneNumber\n    location\n    agency {\n      id\n      name\n      agencyEmail\n    }\n    contactPersons{\n      id\n      name\n      email\n      position\n    }\n  }\n}\n`\nexport const GET_CORPORATE_CLIENTS = gql`\nquery getCorporateClients($search:String, $page:Int, $limit:Int) {\n  corporateClients(\n    search:$search\n    page:$page\n    limit:$limit\n  ) {\n    count\n    pages\n    hasNext\n    hasPrev\n    items {\n      id\n      clientNumber\n      name\n      email\n    }\n  }\n}`\n\nexport const SEND_MESSAGES = gql`\nmutation sendMessage(\n  $emailSubject: String,\n  $emailBody: String,\n  $messageOption: String,\n  $sms: String,\n  $individualClients: [String],\n  $corporateClients:[String],\n  $contactPersons:[String]\n  ) {\n  sendMessage(\n    input: {\n      emailSubject: $emailSubject,\n      emailBody: $emailBody,\n      messageOption: $messageOption,\n      sms:$sms\n      individualClients: $individualClients,\n      corporateClients: $corporateClients,\n      contactPersons: $contactPersons\n    }) {\n    status\n    message {\n      id\n      createdAt\n      sms\n      emailBody\n      emailSubject\n      option\n      sentAt\n      individualClients {\n        id\n        email\n        phoneNumber\n        firstName\n        lastName\n\n      }\n      contactPersons {\n        id\n        email\n        name\n        phoneNumber\n        serviceLine\n      }\n      corporateClients{\n        id\n        name\n        email\n      }\n    }\n  }\n}\n`\n\nexport const GET_SENDING_OPTS = gql`\nquery geMessageOptions {\n  messageOptions}`\n\nexport const GET_MESSAGES = gql`\nquery getMessages($search:String, $page:Int, $limit:Int) {\n  messages(\n    search:$search\n    page:$page\n    limit:$limit\n  ) {\n    count\n    pages\n    hasNext\n    hasPrev\n    items {\n      id\n      createdAt\n      sms\n      emailBody\n      emailSubject\n      option\n      sentAt\n    }\n  }\n}\n`\nexport const GET_MESSAGE = gql`\nquery getMessage($id: String!) {\n  message(id: $id) {\n    id\n    createdAt\n    sms\n    emailBody\n    emailSubject\n    option\n    sentAt\n    individualClients {\n      id\n      email\n      firstName\n      lastName\n      surname\n    }\n    contactPersons {\n      id\n      email\n      name\n      serviceLine\n    }\n    corporateClients{\n      id\n      name\n      email\n    }\n  }\n}\n`\n\nexport const GET_STATUS_OPTS = gql`\nquery getClientStatusOptions {\n  clientStatusOptions\n    }`"]},"metadata":{},"sourceType":"module"}