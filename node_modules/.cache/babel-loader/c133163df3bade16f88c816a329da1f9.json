{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.numToWords = numToWords;\n\nvar _util = require('./util');\n\nvar _numbers = require('./numbers');\n/**\n * Converts a number into the corresponding series of english words\n *\n * Supported options:\n *   ands (boolean): true if ands should be added\n *   commas (boolean): true if commas should be added\n *\n * Examples:\n *  numToWords(0); // returns 'zero'\n *  numToWords(10001); // returns 'ten thousand one'\n *  numToWords(111, { ands: true });  // returns 'one hundred and eleven'\n *\n * @param {number} numToConvert\n * @param {object} options\n * @returns {string}\n */\n\n/**\n * This library provides a method for converting arbitrary integers into english/british text.\n * For example, it would convert the number '123456' to 'one hundred and twenty-three thousand, four hundred and fifty-six'\n *\n * All positive and negative integers are supported. Floating point numbers are rounded to integers\n * before being converted to words.\n *\n *\n * Examples:\n *   numToWords(0); // returns 'zero'\n *   numToWords(10001); // returns 'ten thousand one'\n *   numToWords(111); // returns 'one hundred eleven'\n *   numToWords(-77); // returns 'negative seventy-seven'\n *\n * @author Clinton Morrison <clintonmorrison2@gmail.com>, Emmanuel Guyot\n */\n\n\nfunction numToWords(numToConvert) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var andForBritish = options.ands || false;\n  var comma = options.commas ? ',' : '';\n  var and = andForBritish ? _numbers.andWord + ' ' : '';\n  var words = '';\n  var prefixNum = void 0;\n  var remainder = void 0;\n  var closestSmallerNumber = void 0;\n  var closestSmallerNumberText = void 0;\n  numToConvert = parseInt(numToConvert, 10);\n\n  if (isNaN(numToConvert)) {\n    return 'not a number';\n  }\n\n  if (!isFinite(numToConvert)) {\n    return 'infinity';\n  }\n\n  if (numToConvert < 0) {\n    words += 'negative ';\n    numToConvert *= -1;\n  } // Search list of numbers for closest smaller number.\n  // numToConvert will be written in terms of this number.\n\n\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = _numbers.numbers[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var _step$value = _step.value,\n          number = _step$value.number,\n          text = _step$value.text;\n\n      if (numToConvert === number) {\n        if ((0, _util.shouldPrefixWithOne)(number)) {\n          words += 'one ';\n        }\n\n        words += text;\n        return words;\n      }\n\n      if (numToConvert > number) {\n        closestSmallerNumber = number;\n        closestSmallerNumberText = text;\n        break;\n      }\n    } // How many 'closestSmallerNumber's can numToConvert be grouped into?\n    // e.g. five 'thousand'.\n\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  prefixNum = Math.floor(numToConvert / closestSmallerNumber);\n\n  if (prefixNum !== 1 || (0, _util.shouldPrefixWithOne)(closestSmallerNumber)) {\n    words += numToWords(prefixNum, options) + ' ';\n  }\n\n  words += closestSmallerNumberText;\n  remainder = numToConvert - prefixNum * closestSmallerNumber;\n\n  if (remainder > 0 && (0, _util.shouldHyphenate)(closestSmallerNumber)) {\n    words += '-';\n  } else if (closestSmallerNumber >= 1000 && remainder > 0 && remainder < 100) {\n    words += comma + ' ' + and;\n  } else if (closestSmallerNumber >= 1000 && remainder > 0) {\n    words += comma + ' ';\n  } else if (closestSmallerNumber === 100 && remainder > 0) {\n    words += ' ' + and;\n  } else {\n    words += ' ';\n  }\n\n  if (remainder > 0) {\n    words += numToWords(remainder, options);\n  }\n\n  return words.trim();\n}\n\n;\nexports.default = numToWords;","map":{"version":3,"sources":["/home/actserv/Documents/brooks_insurance_agency_software/brooks-insurance-front-end/node_modules/num-to-words/lib/index.js"],"names":["Object","defineProperty","exports","value","numToWords","_util","require","_numbers","numToConvert","options","arguments","length","undefined","andForBritish","ands","comma","commas","and","andWord","words","prefixNum","remainder","closestSmallerNumber","closestSmallerNumberText","parseInt","isNaN","isFinite","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","numbers","Symbol","iterator","_step","next","done","_step$value","number","text","shouldPrefixWithOne","err","return","Math","floor","shouldHyphenate","trim","default"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.numToWords = numToWords;\n\nvar _util = require('./util');\n\nvar _numbers = require('./numbers');\n\n/**\n * Converts a number into the corresponding series of english words\n *\n * Supported options:\n *   ands (boolean): true if ands should be added\n *   commas (boolean): true if commas should be added\n *\n * Examples:\n *  numToWords(0); // returns 'zero'\n *  numToWords(10001); // returns 'ten thousand one'\n *  numToWords(111, { ands: true });  // returns 'one hundred and eleven'\n *\n * @param {number} numToConvert\n * @param {object} options\n * @returns {string}\n */\n/**\n * This library provides a method for converting arbitrary integers into english/british text.\n * For example, it would convert the number '123456' to 'one hundred and twenty-three thousand, four hundred and fifty-six'\n *\n * All positive and negative integers are supported. Floating point numbers are rounded to integers\n * before being converted to words.\n *\n *\n * Examples:\n *   numToWords(0); // returns 'zero'\n *   numToWords(10001); // returns 'ten thousand one'\n *   numToWords(111); // returns 'one hundred eleven'\n *   numToWords(-77); // returns 'negative seventy-seven'\n *\n * @author Clinton Morrison <clintonmorrison2@gmail.com>, Emmanuel Guyot\n */\nfunction numToWords(numToConvert) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var andForBritish = options.ands || false;\n\n  var comma = options.commas ? ',' : '';\n  var and = andForBritish ? _numbers.andWord + ' ' : '';\n  var words = '';\n  var prefixNum = void 0;\n  var remainder = void 0;\n  var closestSmallerNumber = void 0;\n  var closestSmallerNumberText = void 0;\n\n  numToConvert = parseInt(numToConvert, 10);\n\n  if (isNaN(numToConvert)) {\n    return 'not a number';\n  }\n\n  if (!isFinite(numToConvert)) {\n    return 'infinity';\n  }\n\n  if (numToConvert < 0) {\n    words += 'negative ';\n    numToConvert *= -1;\n  }\n\n  // Search list of numbers for closest smaller number.\n  // numToConvert will be written in terms of this number.\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = _numbers.numbers[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var _step$value = _step.value,\n          number = _step$value.number,\n          text = _step$value.text;\n\n      if (numToConvert === number) {\n        if ((0, _util.shouldPrefixWithOne)(number)) {\n          words += 'one ';\n        }\n        words += text;\n        return words;\n      }\n\n      if (numToConvert > number) {\n        closestSmallerNumber = number;\n        closestSmallerNumberText = text;\n        break;\n      }\n    }\n\n    // How many 'closestSmallerNumber's can numToConvert be grouped into?\n    // e.g. five 'thousand'.\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  prefixNum = Math.floor(numToConvert / closestSmallerNumber);\n  if (prefixNum !== 1 || (0, _util.shouldPrefixWithOne)(closestSmallerNumber)) {\n    words += numToWords(prefixNum, options) + ' ';\n  }\n\n  words += closestSmallerNumberText;\n\n  remainder = numToConvert - prefixNum * closestSmallerNumber;\n  if (remainder > 0 && (0, _util.shouldHyphenate)(closestSmallerNumber)) {\n    words += '-';\n  } else if (closestSmallerNumber >= 1000 && remainder > 0 && remainder < 100) {\n    words += comma + ' ' + and;\n  } else if (closestSmallerNumber >= 1000 && remainder > 0) {\n    words += comma + ' ';\n  } else if (closestSmallerNumber === 100 && remainder > 0) {\n    words += ' ' + and;\n  } else {\n    words += ' ';\n  }\n\n  if (remainder > 0) {\n    words += numToWords(remainder, options);\n  }\n\n  return words.trim();\n};\n\nexports.default = numToWords;"]},"metadata":{},"sourceType":"script"}